image: golang:1.12.7

# variables:
#   GIT_SUBMODULE_STRATEGY: recursive

stages:
    # - test
    # - build
    # - deploy&test
    - deploy&copy
    - deploy&compose
    - message_on_success
    - message_on_failure


# build:
#     stage: build
#     variables:
#         REPO_NAME: monitor
#         BUILD_PATH: /builds/masterback/monitor
#     script:
#         - mkdir -p $BUILD_PATH/deploy/configs
#     artifacts:
#         paths:
#             - $BUILD_PATH/deploy
#         expire_in: 60 minutes
#     only:
#         - production

deploy&copy:
    stage: deploy&copy
    variables:
        IMAGE_NAME: monitor-prod
        BUILD_PATH: /builds/masterback/monitor
    # dependencies:
    #     - build
    script:        
        - ./.import-ssh-key.sh "$PROD_RSA_PRIVATE_KEY"
        # remove old dir on the server
        - ssh gitupdater@dockerweb.rgwork.ru 'rm -rf /home/gitupdater/'$IMAGE_NAME
        # copy new dir on server
        - scp -pr $BUILD_PATH/deploy gitupdater@dockerweb.rgwork.ru:/home/gitupdater/$IMAGE_NAME
    only:
        - production


deploy&compose:
    stage: deploy&compose
    variables:
        IMAGE_NAME: monitor-prod
        BUILD_PATH: /builds/masterback/monitor
    dependencies:
        - deploy&copy
    script:

        # - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        # - eval $(ssh-agent -s)
        # # Attention! Key need convert in base64 and add in secret variable DEPLOY_RSA_PRIVATE_KEY
        # - ssh-add <(echo "$DEPLOY_RSA_PRIVATE_KEY" | base64 --decode)
        # - mkdir -p /root/.ssh
        # - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
        # - echo "$DEPLOY_RSA_PRIVATE_KEY" | base64 --decode > /root/.ssh/id_rsa
        # - chmod 600 /root/.ssh/id_rsa && chmod 700 /root/.ssh

        - ./.import-ssh-key.sh "$DEPLOY_RSA_PRIVATE_KEY"
        # !!! start real deploy and docker-compose
        - ssh gitupdater@dockerweb.rgwork.ru monitor-prod
    only:
        - production


message_on_success:
    stage: message_on_success
    allow_failure: true
    dependencies:
        - deploy&compose
    when: on_success
    script:
        # send to telegram proxy
        - curl -v http://proxy.govoru.com/?message=%E2%9C%85%20Success.%20Auto%20deploy%20on%20${CI_PROJECT_NAME}%20is%20completed,%20Pipeline:%20${CI_PIPELINE_URL}%20by%20${GITLAB_USER_LOGIN}
    only:
        - production


message_on_failure:
    stage: message_on_failure
    allow_failure: true
    dependencies:
        - deploy&compose
    when: on_failure
    script:
        # send to telegram proxy
        - curl -v http://proxy.govoru.com/?message=%E2%9D%8C%20Error.%20Auto%20deploy%20on%20${CI_PROJECT_NAME}%20is%20failed,%20Pipeline:%20${CI_PIPELINE_URL}%20by%20${GITLAB_USER_LOGIN}
    only:
        - production
